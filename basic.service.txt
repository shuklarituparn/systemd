# Systemd files are case-sensitive, so [UNIT] is different from [Unit]

[Unit]

Description= This is used to describe the basic functionality
Requires=  This directive lists all the unit files on which this current unit file depends

If any of the unit files in the required failed to start, this unit file wont start either


Wants= Basically the same as the required but less restrictive. It would want the dependent unit files to be start parallely
but would continue working even if they don't start

BindsTo=  This also same as require but the current unit will also stop if the associated one stops

Before= The units decribed here wont start until the current unit starts

After= The unit listed in the directive will be started before starting the current unit


Conflicts= This is used to list all the unit files that can create conflicts if started at the same time. Starting a
unit with this relationship will make the other unit stop

Condition...= this used to provide a condition, if the condition is not met then the unit skips and is not executed

Assert...= basically same as condition but a negative result causes the failure of the unit to start


[INSTALL]

This section is optional and is used to define the behavior or a unit if it is enabled or disabled. Enabling a unit
marks it to be automatically started at boot.

WantedBy= This is to describe how the unit should be enabled,

IT  can be of many types for example

WantedBy= multi-user.target  (Means that the service would be automatically started when the system boots up and reaches
a multiuser target state, which is the target state that is reached when the system is booted up and is ready for normal
operation

The different type of target there are:

1. default.target := default target that starts when the system boots up (runlevel 5 in sysVinit)
2. multi-user.target:= also when the system is booted up and ready for normal operation
3. graphical.target:=  reached when the system boots and is ready for graphical interaction. Level 5 in sysVinit
4. rescue.target:=   reached when the system is in the minimum rescue state, and is level 1 in sysVinit
5. shutdown.target:= reached when the system is shutting down
6. network-online.target:= service should be started when the network is up and running

SYSVINIT:

7 runlevels in SysVinit:

    0: Halt: This runlevel is used to halt the system, and it is equivalent to the poweroff command.
    1: Single-user mode: This runlevel is used to start the system in single-user mode, which is a minimal system state that is used for maintenance and recovery.
    2: Multi-user mode without networking: This runlevel is used to start the system in multi-user mode without networking, which is similar to the single-user mode but with more services started.
    3: Multi-user mode with networking: This runlevel is used to start the system in multi-user mode with networking, which is a fully functional system state that is used for normal operation.
    4: Not used/User-definable: This runlevel is not used by default and it is intended to be used for custom purposes.
    5: Multi-user mode with GUI: This runlevel is used to start the system in multi-user mode with a graphical user interface, which is similar to the runlevel 3 with the addition of the X Window System.
    6: Reboot: This runlevel is used to reboot the system, and it is equivalent to the reboot command.

system V init is unix like OS Management service. System that manages the start and the shutdown of the system

The scripts are located in the /etc/init.d/ and is executed by the init process, that is the first process to run
when we run the system

sockets.target, basic.target, timers.target, and paths.target. are also different type of targets


RequiredBy=: This directive is very similar to the WantedBy= directive, but instead specifies a required dependency that
will cause the activation to fail if not met. When enabled, a unit with this directive will create a directory ending with .requires.


Alias=: This directive allows the unit to be enabled under another name as well. Among other uses, this allows multiple
providers of a function to be available, so that related units can look for any provider of the common aliased name.

Also=: This directive allows units to be enabled or disabled as a set. Supporting units that should always be
available when this unit is active can be listed here. They will be managed as a group for installation tasks.

DefaultInstance=: For template units (covered later) which can produce unit instances with unpredictable names,
this can be used as a fallback value for the name if an appropriate name is not provided.


[Service]

The service section is used to provide the configuration that is only applicable to the service


Type= it can be one of the following

* Simple:= This is the default if the type and the busname directives are not set

* forking: This service type is used when the service forks a child process, exiting the parent process almost immediately.
This tells systemd that the process is still running even though the parent exited.

* oneshot: This type indicates that the process will be short-lived and that systemd should wait for the process to exit
before continuing on with other units. This is the default Type= and ExecStart= are not set. It is used for one-off tasks.


* dbus: This indicates that unit will take a name on the D-Bus bus. When this happens, systemd will continue to process the next unit.

*notify: This indicates that the service will issue a notification when it has finished starting up.
The systemd process will wait for this to happen before proceeding to other units.


*idle: This indicates that the service will not be run until all jobs are dispatched.



RemainAfterExit=: This directive is commonly used with the oneshot type. It indicates that the service should be
 considered active even after the process exits.

PIDFile=: If the service type is marked as “forking”, this directive is used to set the path of the file that should
contain the process ID number of the main child that should be monitored.


BusName=: This directive should be set to the D-Bus bus name that the service will attempt to acquire when using the
“dbus” service type.



NotifyAccess=: This specifies access to the socket that should be used to listen for notifications when the “notify”
service type is selected This can be “none”, “main”, or "all. The default, “none”, ignores all status messages.
The “main” option will listen to messages from the main process and the “all” option will cause all members of the
service’s control group to be processed.


The following directives describes how we manage our service and it can be done as

ExecStart= This directive takes the path and the command needed to start the service. If path to the command is precided
by dash. A non zero exit code will be accepted and the unit activation won't be marked as failed

ExecStartPre=: This can be used to provide additional commands that should be executed before the main process is started.
This can be used multiple times. Again, commands must specify a full path and they can be preceded by “-” to indicate
that the failure of the command will be tolerated.


ExecStartPost=: This has the same exact qualities as ExecStartPre= except that it specifies commands that will be run after the main process is started.


ExecReload=: This optional directive indicates the command necessary to reload the configuration of the service if available.


ExecStop=: This indicates the command needed to stop the service. If this is not given, the process will be killed immediately when the service is stopped.


ExecStopPost=: This can be used to specify commands to execute following the stop command.


RestartSec=: If automatically restarting the service is enabled, this specifies the amount of time to wait before attempting to restart the service.


Restart=: This indicates the circumstances under which systemd will attempt to automatically restart the service.
This can be set to values like “always”, “on-success”, “on-failure”, “on-abnormal”, “on-abort”, or “on-watchdog”.
These will trigger a restart according to the way that the service was stopped.


TimeoutSec=: This configures the amount of time that systemd will wait when stopping or stopping the service before
marking it as failed or forcefully killing it. You can set separate timeouts with TimeoutStartSec= and TimeoutStopSec= as well.


[Socket]

Each socket unit must have a matching service unit that will be activated if the socket receives activity

By default the socket name will attempt to start the service of the same name upon receiving a connection.

When the service is initialized the socket will be passed to it, to process any buffered requests




ListenStream=: This defines an address for a stream socket which supports sequential, reliable communication. Services that use TCP should use this socket type.

ListenDatagram=: This defines an address for a datagram socket which supports fast, unreliable communication packets. Services that use UDP should set this socket type.

ListenSequentialPacket=: This defines an address for sequential, reliable communication with max length datagrams that preserves message boundaries. This is found most often for Unix sockets.

ListenFIFO: Along with the other listening types, you can also specify a FIFO buffer instead of a socket.




Accept=: This determines whether an additional instance of the service will be started for each connection. If set to false (the default), one instance will handle all connections.


SocketUser=: With a Unix socket, specifies the owner of the socket. This will be the root user if left unset.

SocketGroup=: With a Unix socket, specifies the group owner of the socket. This will be the root group if neither this or the above are set. If only the SocketUser= is set, systemd will try to find a matching group.

SocketMode=: For Unix sockets or FIFO buffers, this sets the permissions on the created entity.

Service=: If the service name does not match the .socket name, the service can be specified with this directive.


The [Path] Section

A path unit defines a filesystem path that systmed can monitor for changes. Another unit must exist that will be be activated when certain activity is detected at the path location. Path activity is determined thorugh inotify events.

The [Path] section of a unit file can contain the following directives:

    PathExists=: This directive is used to check whether the path in question exists. If it does, the associated unit is activated.
    PathExistsGlob=: This is the same as the above, but supports file glob expressions for determining path existence.
    PathChanged=: This watches the path location for changes. The associated unit is activated if a change is detected when the watched file is closed.
    PathModified=: This watches for changes like the above directive, but it activates on file writes as well as when the file is closed.
    DirectoryNotEmpty=: This directive allows systemd to activate the associated unit when the directory is no longer empty.
    Unit=: This specifies the unit to activate when the path conditions specified above are met. If this is omitted, systemd will look for a .service file that shares the same base unit name as this unit.
    MakeDirectory=: This determines if systemd will create the directory structure of the path in question prior to watching.
    DirectoryMode=: If the above is enabled, this will set the permission mode of any path components that must be created.



The [Timer] Section

Timer units are used to schedule tasks to operate at a specific time or after a certain delay. This unit type replaces or supplements some of the functionality of the cron and at daemons. An associated unit must be provided which will be activated when the timer is reached.

The [Timer] section of a unit file can contain some of the following directives:

    OnActiveSec=: This directive allows the associated unit to be activated relative to the .timer unit’s activation.
    OnBootSec=: This directive is used to specify the amount of time after the system is booted when the associated unit should be activated.
    OnStartupSec=: This directive is similar to the above timer, but in relation to when the systemd process itself was started.
    OnUnitActiveSec=: This sets a timer according to when the associated unit was last activated.
    OnUnitInactiveSec=: This sets the timer in relation to when the associated unit was last marked as inactive.
    OnCalendar=: This allows you to activate the associated unit by specifying an absolute instead of relative to an event.
    AccuracySec=: This unit is used to set the level of accuracy with which the timer should be adhered to. By default, the associated unit will be activated within one minute of the timer being reached. The value of this directive will determine the upper bounds on the window in which systemd schedules the activation to occur.
    Unit=: This directive is used to specify the unit that should be activated when the timer elapses. If unset, systemd will look for a .service unit with a name that matches this unit.
    Persistent=: If this is set, systemd will trigger the associated unit when the timer becomes active if it would have been triggered during the period in which the timer was inactive.
    WakeSystem=: Setting this directive allows you to wake a system from suspend if the timer is reached when in that state.


ExecStartPre=/usr/bin/nohup /bin/bash /home/tools/imgproxy/start.sh </dev/null >/dev/null 2>&1 &


Nohup, short for no hang up is a command in Linux systems that keep processes running even after exiting the shell or terminal

Oneshot services are systemd services that perform a specific task and terminate upon completion of that task.
In other words, the process is short-lived. We can periodically start a systemd service using a timer and a oneshot service.

